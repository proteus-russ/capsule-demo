#!/bin/bash
# Does a redeploy for stage or live sites.
# Optionally running proteus-shell before starting web-server

# This script depends on a standard layout for source code and
#  binaries used by the script.

# src -> YOUR_GIT_PROJECT_DIRECTORY
# provided-libs -> LOCATION_OF_SERVLET_API
# deployed-war -> LOCATION_TO_DEPLOY_WAR_FILES

# These can be symlinks or directories.
# Example layout:
#  lrwxrwxrwx  1 proteusaf proteusaf      19 Mar 31 18:26 src -> hippocket-data-app/
#  drwxrwxr-x 14 proteusaf proteusaf    4096 Mar 31 18:02 hippocket-data-app
#  drwxrwxr-x  4 proteusaf proteusaf    4096 Mar 31 18:01 deployed-war
#  lrwxrwxrwx  1 proteusaf proteusaf      23 Mar 21 18:16 provided-libs -> /usr/share/tomcat7/lib/

ROOT=$HOME
DEPLOYED_WAR=deployed-war
SRC=src
PROVIDED_LIBS=provided-libs

runShell=
updateSource=

trap exit 2

for ((i=1;i<=$#;i++))
do
	case "${!i}" in 
		
		-shell | --shell) 
			runShell=1
		;;
		-update | --update) 
			updateSource=1
		;;
		-h | -help | --help)
			echo "$0 [-shell | -update | -h]"
			echo -e "\t arguments:"
			echo -e "\t\t-shell: run the proteus shell."
			echo -e "\t\t-update: run git pull before building."
			echo -e "\t\t-h: display this message."
			exit
		;;
		*) echo "Invalid option: $i"
		;;
	esac
done

set -o errexit
set -o nounset
set -x 

cd "$ROOT"
sudo proteus-service worker stop

if stat -t deployed-war/* >/dev/null 2>&1; then
        zip -r ${ROOT}/backups/deployed-war-$(date +%Y%m%d%H%M%S) ${DEPLOYED_WAR}/*
fi
if [ $(ls ${ROOT}/backups/ | wc -l) -gt 5 ]; then
        rm "${ROOT}/backups/$(ls -t ${ROOT}/backups | tail -n 1)"
fi
rm -rf ${ROOT}/${DEPLOYED_WAR}/*

cd "${ROOT}/${SRC}"
if [ ! -z "$updateSource" ]; then
	git pull
fi
./gradlew clean war
unzip -d "${ROOT}/${DEPLOYED_WAR}" build/gradle/libs/*.war
if [ ! -z "$runShell" ]; then
	proteus-shell
fi

./gradlew -q clean
./gradlew -q # Create the jars for load-time weaving

cd "$ROOT"
sudo proteus-service worker start

